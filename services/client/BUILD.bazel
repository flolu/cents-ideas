load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary", "pkg_web")
load("@npm_bazel_rollup//:index.bzl", "rollup_bundle")
load("@npm_bazel_terser//:index.bzl", "terser_minified")
load("@npm//history-server:index.bzl", "history_server")
load("@npm_bazel_typescript//:index.bzl", "ts_devserver", "ts_library")
load("@k8s_deploy//:defaults.bzl", "k8s_deploy")
load("//services/client:ngsw_config.bzl", "ngsw_config")
load("@io_bazel_rules_docker//nodejs:image.bzl", "nodejs_image")
load("@npm//html-insert-assets:index.bzl", "html_insert_assets")
load("@io_bazel_rules_sass//:defs.bzl", "sass_binary")
load("//services/client:defaults.bzl", "inserted_assets", "static_assets")

package(default_visibility = ["//:__subpackages__"])

exports_files([
    "ngsw-config.json",
    "tsconfig.json",
])

filegroup(
    name = "rxjs_umd_modules",
    srcs = [
        ":rxjs_shims.js",
        "@npm//:node_modules/rxjs/bundles/rxjs.umd.js",
    ],
)

sass_binary(
    name = "styles",
    src = "styles.sass",
)

ts_library(
    name = "initialize_testbed",
    testonly = True,
    srcs = ["initialize_testbed.ts"],
    deps = [
        "@npm//@angular/core",
        "@npm//@angular/platform-browser-dynamic",
    ],
)

ts_library(
    name = "dev_src",
    srcs = ["main.dev.ts"],
    tsconfig = "//services/client:tsconfig.json",
    use_angular_plugin = True,
    deps = [
        "//services/client/app:dev",
        "@npm//@angular/compiler-cli",
        "@npm//@angular/platform-browser",
    ],
)

html_insert_assets(
    name = "inject_scripts_for_dev",
    outs = ["index.html"],
    args = [
        "--html=$(execpath :_index.html)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in inserted_assets] + ["./_/ts_scripts.js"],
    data = static_assets,
)

ts_devserver(
    name = "live_server",
    entry_module = "cents_ideas/services/client/main.dev",
    scripts = [
        "@npm//:node_modules/tslib/tslib.js",
        ":rxjs_umd_modules",
    ],
    static_files = [
        ":inject_scripts_for_dev",
        ":manifest.webmanifest",
        ":styles.css",
        "@npm//:node_modules/zone.js/dist/zone.min.js",
        "//services/client/assets",
    ],
    deps = [":dev_src"],
)

ts_library(
    name = "prod_src",
    srcs = ["main.prod.ts"],
    tsconfig = "//services/client:tsconfig.json",
    use_angular_plugin = True,
    deps = [
        "//services/client/app:prod",
        "@npm//@angular/core",
        "@npm//@angular/platform-browser",
    ],
)

rollup_bundle(
    name = "bundle",
    config_file = "rollup.config.js",
    entry_points = {
        ":main.prod.ts": "index.es2015",
    },
    output_dir = True,
    deps = [
        ":prod_src",
        "@npm//rollup-plugin-commonjs",
        "@npm//rollup-plugin-node-resolve",
    ],
)

terser_minified(
    name = "bundle.min",
    src = ":bundle",
    config_file = ":terser.config.json",
)

html_insert_assets(
    name = "html",
    outs = ["_prod/index.html"],
    args = [
        "--html=$(execpath :_index.html)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in inserted_assets] + ["$(execpath %s)/index.es2015.js" % ":bundle.min"],
    data = static_assets + [":bundle.min"],
)

pkg_web(
    name = "pwa_app",
    srcs = [
        ":bundle.min",
        ":favicon.ico",
        ":html",
        ":manifest.webmanifest",
        ":robots.txt",
        ":styles.css",
        "//services/client/assets",
        "@npm//:node_modules/@angular/service-worker/ngsw-worker.js",
        "@npm//:node_modules/zone.js/dist/zone.min.js",
    ],
    additional_root_paths = ["npm/node_modules/@angular/service-worker"],
)

ngsw_config(
    name = "pwa",
    src = ":pwa_app",
    config = "//services/client:ngsw-config.json",
    index_html = ":html",
)

history_server(
    name = "pwa_server",
    data = [":pwa"],
    templated_args = [
        "-a",
        "$(rlocation cents_ideas/services/client/pwa)",
    ],
)

ts_library(
    name = "server_lib",
    srcs = ["server.ts"],
    deps = [
        "//services/client/app:server",
        "@npm//@angular/core",
        "@npm//@nguniversal/express-engine",
        "@npm//@types/compression",
        "@npm//@types/cookie-parser",
        "@npm//@types/express",
        "@npm//@types/node",
        "@npm//@types/yargs",
        "@npm//compression",
        "@npm//cookie-parser",
        "@npm//express",
        "@npm//yargs",
    ],
)

nodejs_binary(
    name = "prod_server",
    data = [
        ":pwa",
        ":server_lib",
    ],
    entry_point = ":server.ts",
)

nodejs_image(
    name = "prod_server_image",
    data = [
        ":pwa",
        ":server_lib",
    ],
    entry_point = ":server.ts",
)

k8s_deploy(
    name = "k8s",
    images = {"client:placeholder_name": ":prod_server_image"},
    template = ":client.yaml",
)
