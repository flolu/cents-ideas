load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary", "pkg_web")
load("@npm//@babel/cli:index.bzl", "babel")
load("@npm//html-insert-assets:index.bzl", "html_insert_assets")
load("@npm_bazel_rollup//:index.bzl", "rollup_bundle")
load("@npm_bazel_terser//:index.bzl", "terser_minified")
load("@npm//history-server:index.bzl", "history_server")
load("@npm_bazel_typescript//:index.bzl", "ts_devserver", "ts_library")
load("@npm_angular_bazel//:index.bzl", "ng_module")
load("@k8s_deploy//:defaults.bzl", "k8s_deploy")
load("//services/client:ngsw_config.bzl", "ngsw_config")
load("@io_bazel_rules_docker//nodejs:image.bzl", "nodejs_image")

package(default_visibility = ["//:__subpackages__"])

ts_library(
    name = "initialize_testbed",
    testonly = True,
    srcs = ["initialize_testbed.ts"],
    deps = [
        "@npm//@angular/core",
        "@npm//@angular/platform-browser-dynamic",
    ],
)

ng_module(
    name = "dev_src",
    srcs = ["main.dev.ts"],
    tsconfig = "//services/client:tsconfig.json",
    deps = ["//services/client/src/app:dev_app"],
)

filegroup(
    name = "rxjs_umd_modules",
    srcs = [
        ":rxjs_shims.js",
        "@npm//:node_modules/rxjs/bundles/rxjs.umd.js",
    ],
)

_ASSETS = [
    "@npm//:node_modules/zone.js/dist/zone.min.js",
    ":styles.css",
    "favicon.ico",
    "manifest.webmanifest",
]

html_insert_assets(
    name = "inject_scripts_for_dev",
    outs = ["index.html"],
    args = [
        "--html=$(execpath //services/client/src:index.dev.html)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in _ASSETS] + [
        "./_/ts_scripts.js",
    ],
    data = [":index.dev.html"] + _ASSETS,
)

ts_devserver(
    name = "live_server",
    entry_module = "cents_ideas/services/client/src/main.dev",
    scripts = [
        "@npm//:node_modules/tslib/tslib.js",
        ":rxjs_umd_modules",
        "@npm//date-fns:date-fns.umd.js",
    ],
    static_files = _ASSETS + [
        ":inject_scripts_for_dev",
        "//services/client/src/assets",
    ],
    deps = [":dev_src"],
)

ng_module(
    name = "prod_src",
    srcs = ["main.prod.ts"],
    tsconfig = "//services/client:tsconfig.json",
    deps = ["//services/client/src/app:prod_app"],
)

rollup_bundle(
    name = "bundle-es2015",
    config_file = "rollup.config.js",
    entry_points = {
        ":main.prod.ts": "index",
    },
    output_dir = True,
    deps = [
        ":prod_src",
        "@npm//rollup-plugin-commonjs",
        "@npm//rollup-plugin-node-resolve",
    ],
)

babel(
    name = "bundle-es5",
    args = [
        "$(execpath :bundle-es2015)",
        "--no-babelrc",
        "--source-maps",
        "--presets=@babel/preset-env",
        "--out-dir",
        "$(@D)",
    ],
    data = [
        ":bundle-es2015",
        "@npm//@babel/preset-env",
    ],
    output_dir = True,
)

terser_minified(
    name = "bundle-es2015.min",
    src = ":bundle-es2015",
)

terser_minified(
    name = "bundle-es5.min",
    src = ":bundle-es5",
)

_BUNDLE_ASSETS = [
    ":bundle-es2015.min",
    ":bundle-es5.min",
]

html_insert_assets(
    name = "inject_scripts_for_prod",
    outs = ["_prodapp/services/client/src/index.html"],
    args = [
               "--html=$(execpath //services/client/src:index.prod.html)",
               "--out=$@",
               "--roots=. $(RULEDIR) npm/node_modules/core-js/client npm/node_modules/systemjs/dist",
               "--assets",
           ] + ["$(execpath %s)" % s for s in _ASSETS] +
           ["$(execpath %s)/index.js" % s for s in _BUNDLE_ASSETS],
    data = [":index.prod.html"] + _ASSETS + _BUNDLE_ASSETS,
)

pkg_web(
    name = "pwa_app",
    srcs = _ASSETS + _BUNDLE_ASSETS + [
        ":inject_scripts_for_prod",
        "//services/client/src/assets",
        "@npm//:node_modules/systemjs/dist/system.js",
        "@npm//:node_modules/@angular/service-worker/ngsw-worker.js",
    ],
    additional_root_paths = [
        "npm/node_modules/core-js/client",
        "npm/node_modules/systemjs/dist",
        "npm/node_modules/@angular/service-worker",
    ],
)

ngsw_config(
    name = "pwa",
    src = ":pwa_app",
    config = "//services/client:ngsw-config.json",
    index_html = ":inject_scripts_for_prod",
)

history_server(
    name = "pwa_server",
    data = [":pwa"],
    templated_args = [
        "-a",
        "$(rlocation cents_ideas/services/client/src/pwa)",
    ],
)

ts_library(
    name = "dev_server_lib",
    srcs = ["server.dev.ts"],
    deps = [
        "//services/client/src/app:dev_server",
        "@npm//@angular/core",
        "@npm//@nguniversal/express-engine",
        "@npm//@types/compression",
        "@npm//@types/express",
        "@npm//@types/node",
        "@npm//@types/yargs",
        "@npm//compression",
        "@npm//express",
        "@npm//yargs",
    ],
)

nodejs_binary(
    name = "local_server",
    data = [
        ":dev_server_lib",
        ":pwa",
    ],
    entry_point = ":server.dev.ts",
)

ts_library(
    name = "prod_server_lib",
    srcs = ["server.prod.ts"],
    deps = [
        "//services/client/src/app:prod_server",
        "@npm//@angular/core",
        "@npm//@nguniversal/express-engine",
        "@npm//@types/compression",
        "@npm//@types/express",
        "@npm//@types/node",
        "@npm//compression",
        "@npm//express",
    ],
)

nodejs_image(
    name = "prod_server",
    data = [
        ":prod_server_lib",
        ":pwa",
    ],
    entry_point = ":server.prod.ts",
)

k8s_deploy(
    name = "k8s",
    images = {"client:placeholder_name": ":prod_server"},
    template = ":client.yaml",
)
