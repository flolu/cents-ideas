load("@npm_bazel_typescript//:index.bzl", "ts_library")
load("@io_bazel_rules_docker//nodejs:image.bzl", "nodejs_image")
load("@k8s_deploy//:defaults.bzl", "k8s_deploy")
load("@microk8s_deploy//:defaults.bzl", "microk8s_deploy")
load("@centsideas//packages/jest:jest.bzl", "jest_test")

package(default_visibility = ["//visibility:public"])

lib_deps = [
    "//packages/enums",
    "//packages/environment",
    "//packages/event-sourcing",
    "//packages/models",
    "//packages/utils",
    "//packages/rpc",
    "@npm//@types/express",
    "@npm//@types/faker",
    "@npm//@types/jsonwebtoken",
    "@npm//@types/mongodb",
    "@npm//faker",
    "@npm//inversify",
    "@npm//jsonwebtoken",
    "@npm//mongodb",
    "@npm//reflect-metadata",
    "@npm//shortid",
    "@npm//query-string",
    "@npm//axios",
    "@npm//@types/node",
]

ts_library(
    name = "lib",
    srcs = glob(
        include = ["**/*.ts"],
        exclude = ["**/*.spec.ts"],
    ),
    deps = lib_deps,
)

nodejs_image(
    name = "image",
    data = [":lib"],
    entry_point = ":index.ts",
)

k8s_deploy(
    name = "k8s",
    images = {"users:placeholder_name": ":image"},
    template = ":users.yaml",
)

microk8s_deploy(
    name = "microk8s",
    images = {"users:placeholder_name": ":image"},
    template = ":users.yaml",
)

ts_library(
    name = "test_lib",
    srcs = glob(include = ["**/*.spec.ts"]),
    tsconfig = "//:tsconfig.json",
    deps = [":lib"] + lib_deps,
)

filegroup(
    name = "test_lib.js",
    srcs = [":test_lib"],
    output_group = "es5_sources",
)

jest_test(
    name = "test",
    srcs = [":test_lib.js"],
    jest_config = "//packages/jest:jest.config.js",
    deps = [":lib"],
)
