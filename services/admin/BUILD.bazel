load("@npm_bazel_typescript//:index.bzl", "ts_library")
load("@centsideas//packages/jest:jest.bzl", "ts_jest")
load("@io_bazel_rules_docker//nodejs:image.bzl", "nodejs_image")
load("@k8s_deploy//:defaults.bzl", "k8s_deploy")
load("@microk8s_deploy//:defaults.bzl", "microk8s_deploy")
load("@io_bazel_rules_k8s//k8s:objects.bzl", "k8s_objects")

package(default_visibility = ["//visibility:public"])

ts_library(
    name = "lib",
    srcs = glob(
        include = ["**/*.ts"],
        exclude = ["**/*.spec.ts"],
    ),
    deps = [
        "//packages/config",
        "//packages/dependency-injection",
        "//packages/enums",
        "//packages/utils",
        "@npm//@types/node",
        "@npm//inversify",
        "@npm//kafkajs",
        "@npm//reflect-metadata",
    ],
)

nodejs_image(
    name = "image",
    data = [":lib"],
    entry_point = ":index.ts",
)

ts_jest(
    name = "test",
    srcs = glob(["**/*.spec.ts"]),
    test_lib = "lib",
    tsconfig = "//:tsconfig.json",
    deps = [],
)

k8s_deploy(
    name = "admin",
    images = {"admin:placeholder_name": ":image"},
    template = ":admin.yaml",
)

k8s_objects(
    name = "k8s",
    objects = [
        ":admin",
    ],
)

microk8s_deploy(
    name = "microk8s_admin",
    images = {"admin:placeholder_name": ":image"},
    template = ":admin.yaml",
)

k8s_objects(
    name = "microk8s",
    objects = [
        ":microk8s_admin",
    ],
)
